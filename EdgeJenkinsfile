@Library('edge-ci') _

pipeline {
  agent none
  /*options{
    skipDefaultCheckout()
  }*/
  stages {
    stage('Build') {
        agent{
            label 'oulu-lab'
        }
        options{
            lock resource: 'oulu-lab'
        }
        steps {
         //checkout scm
          withEnv(["GOROOT=/usr/local/go", "GOPATH=/home/jenkins/goprojects", "PATH+GO=/home/jenkins/goprojects/bin:/usr/local/go/bin"]){
              script{
                  sh 'rm -rf /home/jenknis/goprojects/src/github.com/armPelionEdge/devicedb'
                  if(env.BRANCH_NAME ==~ /^PR-[0-9]*$/){
                    sh "go get -u github.com/armPelionEdge/devicedb && cd /home/jenkins/goprojects/src/github.com/armPelionEdge/devicedb && git fetch --all && git checkout ${CHANGE_BRANCH} && git merge origin/${env.CHANGE_TARGET} && go build"
                  }
                  else{
                    sh "go get -u github.com/armPelionEdge/devicedb && cd /home/jenkins/goprojects/src/github.com/armPelionEdge/devicedb && git fetch --all && git checkout ${env.BRANCH_NAME} && git merge origin/${env.BRANCH_NAME} && go build"
                  }
              }
          }
       }
    }

    stage('Test'){
      agent{
        label 'oulu-lab'
      }
      steps {
        withEnv(["GOROOT=/usr/local/go", "GOPATH=$HOME/goprojects", "PATH+GO=$HOME/goprojects/bin:/usr/local/go/bin"]){
          sh 'go get -u github.com/jstemmer/go-junit-report'
          sh "cd /home/jenkins/goprojects/src/github.com/armPelionEdge/devicedb && go test -v -coverpkg=all -coverprofile cov.out 2>&1 ./... | go-junit-report > report.xml && cp report.xml cov.out /home/jenkins/ws/devicedb_${env.BRANCH_NAME}/"
          sh "cd /home/jenkins/goprojects/src/github.com/armPelionEdge/devicedb && gocover-cobertura < cov.out > coverage.xml && cp coverage.xml /home/jenkins/ws/devicedb_${env.BRANCH_NAME}/"
          //stash includes: 'cov.out', name: 'sonar-coverage'
        }
      }
    }

    /*stage('SonarQube'){
      agent{
        label 'oulu-lab'
      }
      //options{
        //checkoutToSubdirectory('/var/jenkins_home/goprojects/src/github.com/armPelionEdge/devicedb')
      //}
      environment {
        scannerHome = tool 'SonarQubeScanner'
      }
      steps {
        withSonarQubeEnv('sonarqube') {
          //unstash 'sonar-coverage'
          sh "cd $JENKINS_HOME/goprojects/src/github.com/armPelionEdge/devicedb && ${scannerHome}/bin/sonar-scanner && cp -r .scannerwork $JENKINS_HOME/ws/devicedb_${env.BRANCH_NAME}"
        }
      }
    }*/

    stage('Auto Doc') {
      agent{
        label 'oulu-lab'
      }
      steps {
        withEnv(["GOROOT=/usr/local/go", "GOPATH=$HOME/goprojects", "PATH+GO=$HOME/goprojects/bin:/usr/local/go/bin"]){
          sh 'go get github.com/robertkrimen/godocdown/godocdown'
          sh 'cd /home/jenkins/goprojects/src/github.com/armPelionEdge/devicedb && go list ./... > devicedb_packages.txt'
          sh 'cd /home/jenkins/goprojects/src/github.com/armPelionEdge/devicedb && input=devicedb_packages.txt && while IFS= read -r line; do godocdown -plain=false $line >> devicedb_docs.md; done < $input'
          sh "cd /home/jenkins/goprojects/src/github.com/armPelionEdge/devicedb && cp devicedb_docs.md /home/jenkins/ws/devicedb_${env.BRANCH_NAME}/"
        }
      }
    }
  }

  post{
    always{
      node('oulu-lab'){
        junit 'report.xml'
        step([$class: 'CoberturaPublisher', autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'coverage.xml', failUnhealthy: false, failUnstable: false, maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false])
        archiveArtifacts artifacts: 'devicedb_docs.md'
        notifySlack()
        sh 'rm -rf /home/jenknis/goprojects/src/github.com/armPelionEdge/devicedb'
      }
    }
  }
}
