import hudson.Util;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

/*
configuration is a Map type data structure that accepts key value pairs of information that the user wants
to include in their slack notification. Users can include urls or links of reports or any dashboards
in the configuration that they want to display in their notification. Users are advised to use meaningful key
names in the configuration and in case they want to include the environment on which the job is running, they
should use 'env' as the key name.
*/

//def call(String buildStatus = 'STARTED', prevBuildStatus = '', String JOB_NAME = '', String BUILD_URL = '', Map configuration = [:]) {
def notifySlack(configuration = [:]) {

    print "inside notify slack"

    def prevBuildStatus = "${currentBuild.previousBuild?.result}"
    def buildStatus = "${currentBuild.currentResult}"
    print prevBuildStatus
    print buildStatus

    def colorCode = '#FF0000' // Red
    if (buildStatus != 'SUCCESS' ^ prevBuildStatus != 'SUCCESS') {
      print "inside if"
        if (buildStatus == 'UNSTABLE') {
            colorCode = '#FFFF00' // Yellow
        } else if (buildStatus == 'ABORTED') {
            colorCode = '#A9A9A9' // Darg grey
        } else if (buildStatus == 'SUCCESS') {
            colorCode = '#00FF00' // Green
        } else {
            colorCode = '#FF0000' // Red
        }
        def mainText = '*Name -> <' + env.BUILD_URL + '|' + env.JOB_NAME + '>*'

        JSONArray attachments = new JSONArray();
        JSONObject detailsAttachment = new JSONObject();


        // Create details field for attachment.
        JSONArray fields = new JSONArray();
        JSONObject fieldsObject = new JSONObject();

        fieldsObject.put('title', 'Status');
        fieldsObject.put('value', buildStatus.toString());
        fieldsObject.put('short', true);
        fields.add(fieldsObject);

        fieldsObject = new JSONObject();
        fieldsObject.put('title', 'Job ID');
        fieldsObject.put('value', '#' + BUILD_NUMBER.toString());
        fieldsObject.put('short', true);
        fields.add(fieldsObject);

        configuration.each { k, v ->
            fieldsObject = new JSONObject();
            report_name = k.capitalize();
            fieldsObject.put('value', '<' + v + '|*' + report_name + ' Report*>');
            fieldsObject.put('short', true);
            fields.add(fieldsObject);
        }

        if (buildStatus == 'SUCCESS') {
            detailsAttachment.put('title', "Restored to Normal");
        }

        // Put fields JSONArray
        detailsAttachment.put('fields', fields);
        detailsAttachment.put('color', colorCode.toString());
        detailsAttachment.put('footer', 'After ' + Util.getTimeSpanString(System.currentTimeMillis() - currentBuild.startTimeInMillis))
        attachments.add(detailsAttachment);

        print detailsAttachment

        // Send notifications
        slackSend(message: mainText.toString(), attachments: attachments.toString(), channel: '#edge-jenkins-ci')

    }
}


pipeline {
  agent{
    label 'oulu-lab'
  }
  /*options{
    skipDefaultCheckout()
  }*/
  stages {
    stage('Build') {
        /*options{
            lock resource: 'oulu-lab'
        }*/
        steps {
         //checkout scm
          withEnv(["GOROOT=/usr/local/go", "GOPATH=/home/jenkins/goprojects", "PATH+GO=/home/jenkins/goprojects/bin:/usr/local/go/bin"]){
              script{
                  sh 'rm -rf /home/jenknis/goprojects/src/github.com/armPelionEdge/devicedb'
                  if(env.BRANCH_NAME ==~ /^PR-[0-9]*$/){
                    sh "go get -u github.com/armPelionEdge/devicedb && cd /home/jenkins/goprojects/src/github.com/armPelionEdge/devicedb && git fetch --all && git checkout ${CHANGE_BRANCH} && git merge origin/${env.CHANGE_TARGET} && go build"
                  }
                  else{
                    sh "go get -u github.com/armPelionEdge/devicedb && cd /home/jenkins/goprojects/src/github.com/armPelionEdge/devicedb && git fetch --all && git checkout ${env.BRANCH_NAME} && git merge origin/${env.BRANCH_NAME} && go build"
                  }
              }
          }
       }
    }

    /*stage('Test'){
      steps {
        withEnv(["GOROOT=/usr/local/go", "GOPATH=$HOME/goprojects", "PATH+GO=$HOME/goprojects/bin:/usr/local/go/bin"]){
          sh """
            go get -u github.com/jstemmer/go-junit-report
            go get golang.org/x/tools/cmd/cover
            go get github.com/t-yuki/gocover-cobertura
            cd /home/jenkins/goprojects/src/github.com/armPelionEdge/devicedb
            go test -v -coverpkg=all -coverprofile cov.out 2>&1 ./... | go-junit-report > report.xml
            cp report.xml cov.out /home/jenkins/ws/devicedb_${env.BRANCH_NAME}/
            gocover-cobertura < cov.out > coverage.xml
            cp coverage.xml /home/jenkins/ws/devicedb_${env.BRANCH_NAME}/
          """
          //stash includes: 'cov.out', name: 'sonar-coverage'
        }
      }
    }*/

    /*stage('SonarQube'){
      environment {
        scannerHome = tool 'SonarQubeScanner'
      }
      steps {
        withSonarQubeEnv('sonarqube') {
          //unstash 'sonar-coverage'
          sh """
            cd $HOME/goprojects/src/github.com/armPelionEdge/devicedb
            ${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=edge:devicedb:master -Dsonar.projectName=devicedb:master  -Dsonar.projectVersion=1.0.0 -Dsonar.host.url=http://127.0.0.1:9000 -Dsonar.login=29a1119178eefc6cfabfc01906bfe6a96e62856b -Dsonar.go.coverage.reportPaths=cov.out -Dsonar.lang.patterns.c='' -Dsonar.analysis.mode=publish -Dsonar.sourceEncoding=UTF-8
            cp -r .scannerwork $HOME/ws/devicedb_${env.BRANCH_NAME}
            """
        }
      }
    }*/

    /*stage('Coverity'){
      steps{
        withAWS(region: "eu-west-1", credentials: "AKIA4NI2GQUKC43TCTC2") {
          sh """
            . ~/.profile
            cd $HOME/goprojects/src/github.com/armPelionEdge/devicedb
            cov-configure --go
            cov-build --dir coverity go build
            tar -zcvf coverity-devicedb_master.tar.gz coverity
            aws s3 cp coverity-devicedb_master.tar.gz s3://coverity-reports/
          """
        }
      }
    }

    stage('Coveralls'){
      environment{
        COVERALLS_ENDPOINT = 'https://coveralls.isgtesting.com'
        COVERALLS_REPO_TOKEN = 'NHm2Ew9RyyySJPxpvjQQBuJTN7pWtB5EU'
      }
      steps{
        withEnv(["GOROOT=/usr/local/go", "GOPATH=$HOME/goprojects", "PATH+GO=$HOME/goprojects/bin:/usr/local/go/bin"]){
          sh """
            go get github.com/mattn/goveralls
            cd /home/jenkins/goprojects/src/github.com/armPelionEdge/devicedb
            goveralls -coverprofile cov.out -endpoint ${COVERALLS_ENDPOINT} -reponame sameer2209-arm/devicedb -repotoken ${COVERALLS_REPO_TOKEN} -service edge-jenkins
          """
        }
      }
    }*/

    stage('Auto Doc') {
      steps {
        sh 'echo hello'
        withEnv(["GOROOT=/usr/local/go", "GOPATH=/home/jenkins/goprojects", "PATH+GO=/home/jenkins/goprojects/bin:/usr/local/go/bin"]){
          /*sh """
            echo line 1
            go get github.com/robertkrimen/godocdown/godocdown
            echo line 2
            cd /home/jenkins/goprojects/src/github.com/armPelionEdge/devicedb
            echo line 3
            go list ./... > devicedb_packages.txt
            echo line 4
            input=devicedb_packages.txt && while IFS= read -r line; do godocdown -plain=false $line >> devicedb_docs.md; done < $input
            echo line 5
            cp devicedb_docs.md /home/jenkins/ws/devicedb_${env.BRANCH_NAME}/
            echo line 6
          """*/
          sh "go get github.com/robertkrimen/godocdown/godocdown"
          sh "cd /home/jenkins/goprojects/src/github.com/armPelionEdge/devicedb && go list ./... > devicedb_packages.txt"
          sh "input=devicedb_packages.txt && while IFS= read -r line; do godocdown -plain=false $line >> devicedb_docs.md; done < $input"
          sh "cp devicedb_docs.md /home/jenkins/ws/devicedb_${env.BRANCH_NAME}/"
        }
      }
    }
  }

  post{
    always{
      junit 'report.xml'
      step([$class: 'CoberturaPublisher', autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'coverage.xml', failUnhealthy: false, failUnstable: false, maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false])
      archiveArtifacts artifacts: 'devicedb_docs.md'
      notifySlack()
      sh 'rm -rf /home/jenknis/goprojects/src/github.com/armPelionEdge/devicedb'
    }
  }
}
